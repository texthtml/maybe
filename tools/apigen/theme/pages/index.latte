{templateType ApiGen\Renderer\Latte\Template\TreeTemplate}
{import '../blocks/@index.latte'}

{embed layout}
	{block content}
		<h1>Overview</h1>
		<p>
			This library implements two monadic types for PHPÂ :
			<dl>
				<dt><a href="TH.Maybe.Option.html"><code>Option</code></a></dt>
				<dd>
					Type <code>Option</code> represents an optional value: every <code>Option</code> is either
					<code>Option\Some</code> and contains a value, or <code>Option\None</code>, and does not.
				</dd>
				<dt><a href="TH.Maybe.Result.html"><code>Result</code></a></dt>
				<dd>
					<code>Result<T, E></code> is the type used for returning and propagating errors.
					It has two variants, <code>Ok(T)</code>, representing success and containing a value,
					and <code>Err(E)</code>, representing error and containing an error value.
				</dd>
			</dl>
		</p>

		<p>
			Using those types makes it easier to handle result of operations correctly.
			Those two types are also carefully annotated to help static analysis tools discover potential issues such as
			invalid returned type or dead code.
		</p>

		<h2>Installation</h2>

		<pre><code class="language-bash">composer req texthtml/maybe</code></pre>

		<h2>Basic usages</h2>

		<h3>Using <code>Option</code>s</h3>

		<p>{capture $code}{syntax off}use TH\Maybe\Option;

/**
 * @param Option<float>
 */
function divide(float $numerator, float $denominator): Option {
    return match ($denomintor) {
        0.0 => Option\none(),
        _ => Option\some($numerator / $denominator)
    };
}

// The return value of the function is an option
$result = divide(2.0, 3.0);

// Pattern match to retrieve the value
if ($result instanceof Option\Some) {
    // The division was valid
    echo "Result: {$option->unwrap()}");
} else {
    // The division was invalid
    echo "Cannot divide by 0";
}{/syntax}{/capture}

			{do $code = (string) $code}
			<pre><code class="language-php">{$code}</code></pre>

			<a href="TH.Maybe.Option.html">Read more about <code>Option</code>s</a>
		</p>

		<h3>Using <code>Result</code>s</h3>

		<p>
			{capture $code}{syntax off}use TH\Maybe\Option;

/**
 * @param Result<int,string>
 */
function parse_version(string $header): Result {
    return match ($header[0] ?? null) {
        null => Result\err("invalid header length"),
        "1" => Result\ok(1),
        "2" => Result\ok(2),
        default => Result\err("invalid version"),
    };
}

$version = parse_version("1.x");
if ($version instanceof Result\Ok) {
    echo "working with version: {$version->unwrap()}";
} else {
    echo "error parsing header: {$version->unwrapErr()}";
}
// @prints working with version: 1{/syntax}{/capture}

			{do $code = (string) $code}
			<pre><code class="language-php">{$code}</code></pre>

			<a href="TH.Maybe.Result.html">Read more about <code>Result</code>s</a>
		</p>
	{/block}
{/embed}
